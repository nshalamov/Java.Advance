package com.company;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Scanner;

public class Robotics { // from the lecture of K. Mitev; Pretty hard task.
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        // On the first line, you will get the names of the
        // robots and their processing times in format "name-time"
        String[] input = scan.nextLine().split(";");
        String[] robotName = new String[input.length]; // Names
        int[] processingTime = new int[input.length]; // Times
        int[] currentTimer = new int[input.length]; // Accordingly their timers

        for (int i = 0; i < input.length; i++) { // Filling the arrays.
            String[] tokens = input[i].split("-"); // robotName-processingTime
            robotName[i] = tokens[0];
            processingTime[i] = Integer.parseInt(tokens[1]);
            currentTimer[i] = 0;
        }
        // Reading time
        int[] clock = Arrays
                .stream(scan.nextLine().split(":"))
                .mapToInt(Integer::parseInt)
                .toArray();
        // Converting time into seconds
        int hours = clock[0] * 3600;
        int minutes = clock[1] * 60;
        int seconds = clock[2];
        int time = hours + minutes + seconds;

        String product = "";
        ArrayDeque<String> products = new ArrayDeque<>(); // Queue of the products
        
        while(!(product = scan.nextLine()).equals("End")) { // Filling the queue
            products.offer(product);
        }
        
        while (!products.isEmpty()) {
            for (int i = 0; i < input.length; i++) {
                // If the work started, extracting 1 sec. every iteration from every robot
                if (currentTimer[i] > 0) {
                    currentTimer[i]--;
                }
            }

            time++; // Overall time

            String currentItem = products.poll();
            boolean isTaken = false;

            for (int i = 0; i < input.length; i++) {
                if (currentTimer[i] == 0) { // If the robot is free
                    // Print the time of the beginning of the work
                    System.out.printf("%s - %s [%s]%n" , robotName[i], currentItem, getTime(time));
                    currentTimer[i] = processingTime[i]; // Setting the timer
                    isTaken = true;
                    break;
                }

            }

            if (!isTaken) { // If all robots are busy, our product gets to the tail of the queue
                products.offer(currentItem);
            }
        }
    }

    private static String getTime(int time) { // Formatting time
        int hours = time / 3600 % 24; // % 24 to avoid 24th hour on the clock
        int minutes = time / 60 % 60; // % 60 to get the minutes below 60th minute
        // (otherwise 60 minutes might occur on the clock
        int seconds = time % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }
}
